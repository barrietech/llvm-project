; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=newgvn -S | FileCheck %s

define i32 @main() {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY9:%.*]]
; CHECK:       for.body9:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[TMP0:%.*]], [[FOR_BODY9]] ]
; CHECK-NEXT:    [[TMP0]] = add i64 1, [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP1:%.*]] = add i64 [[TMP0]], 1
; CHECK-NEXT:    br label [[FOR_BODY9]]
;
entry:
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body9 ]
  %0 = add i64 1, %indvars.iv
  %1 = add i64 %0, 1
  %2 = trunc i64 %1 to i32
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %for.body9
}

declare void @dummy(i64)

define i32 @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[TMP0:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP0]] = add i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[TMP1:%.*]] = add i64 [[TMP0]], 1
; CHECK-NEXT:    call void @dummy(i64 [[TMP1]])
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp slt i64 [[TMP0]], 1000
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[FOR_BODY]], label [[END:%.*]]
; CHECK:       end:
; CHECK-NEXT:    ret i32 0
;
entry:
  br label %for.body

for.body:                                        ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %0 = add i64 %indvars.iv, 1
  %1 = add i64 %0, 1
  call void @dummy(i64 %1)

  %indvars.iv.next = add i64 %indvars.iv, 1
  %tobool = icmp slt i64 %indvars.iv.next, 1000
  br i1 %tobool, label %for.body, label %end

end:
  ret i32 0
}

