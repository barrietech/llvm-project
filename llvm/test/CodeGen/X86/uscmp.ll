; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

define i8 @ucmp(i32 %x, i32 %y) {
; CHECK-LABEL: ucmp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movl $255, %eax
; CHECK-NEXT:    cmovael %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
  %1 = call i8 @llvm.ucmp(i32 %x, i32 %y)
  ret i8 %1
}

define i8 @scmp(i32 %x, i32 %y) {
; CHECK-LABEL: scmp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movl $255, %eax
; CHECK-NEXT:    cmovael %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
  %1 = call i8 @llvm.ucmp(i32 %x, i32 %y)
  ret i8 %1
}

define i4 @ucmp_narrow_result(i32 %x, i32 %y) {
; CHECK-LABEL: ucmp_narrow_result:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movl $255, %eax
; CHECK-NEXT:    cmovael %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
  %1 = call i4 @llvm.ucmp(i32 %x, i32 %y)
  ret i4 %1
}

define i8 @scmp_narrow_op(i5 %x, i5 %y) {
; CHECK-LABEL: scmp_narrow_op:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andb $31, %sil
; CHECK-NEXT:    andb $31, %dil
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpb %sil, %dil
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movl $255, %eax
; CHECK-NEXT:    cmovael %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
  %1 = call i8 @llvm.ucmp(i5 %x, i5 %y)
  ret i8 %1
}

define i128 @ucmp_wide_result(i32 %x, i32 %y) {
; CHECK-LABEL: ucmp_wide_result:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movq $-1, %rax
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    retq
  %1 = call i128 @llvm.ucmp(i32 %x, i32 %y)
  ret i128 %1
}

define i8 @scmp_wide_op(i128 %x, i128 %y) {
; CHECK-LABEL: scmp_wide_op:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rdi, %rdx
; CHECK-NEXT:    movq %rcx, %rax
; CHECK-NEXT:    sbbq %rsi, %rax
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    movzbl %al, %r8d
; CHECK-NEXT:    cmpq %rdx, %rdi
; CHECK-NEXT:    sbbq %rcx, %rsi
; CHECK-NEXT:    movl $255, %eax
; CHECK-NEXT:    cmovgel %r8d, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
  %1 = call i8 @llvm.scmp(i128 %x, i128 %y)
  ret i8 %1
}

define i41 @ucmp_uncommon_types(i7 %x, i7 %y) {
; CHECK-LABEL: ucmp_uncommon_types:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andb $127, %sil
; CHECK-NEXT:    andb $127, %dil
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    cmpb %sil, %dil
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    movq $-1, %rax
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    retq
  %1 = call i41 @llvm.ucmp(i7 %x, i7 %y)
  ret i41 %1
}

define i125 @scmp_uncommon_types(i99 %x, i99 %y) {
; CHECK-LABEL: scmp_uncommon_types:
; CHECK:       # %bb.0:
; CHECK-NEXT:    shlq $29, %rsi
; CHECK-NEXT:    sarq $29, %rsi
; CHECK-NEXT:    shlq $29, %rcx
; CHECK-NEXT:    sarq $29, %rcx
; CHECK-NEXT:    cmpq %rdi, %rdx
; CHECK-NEXT:    movq %rcx, %rax
; CHECK-NEXT:    sbbq %rsi, %rax
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    movzbl %al, %r8d
; CHECK-NEXT:    cmpq %rdx, %rdi
; CHECK-NEXT:    sbbq %rcx, %rsi
; CHECK-NEXT:    movq $-1, %rax
; CHECK-NEXT:    cmovgeq %r8, %rax
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    retq
  %1 = call i125 @llvm.scmp(i99 %x, i99 %y)
  ret i125 %1
}
